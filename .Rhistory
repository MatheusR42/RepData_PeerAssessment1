inverseMatrix <<- NULL
}
get <- function(){
x
}
setInverse <- function(inverse){
inverseMatrix <<- inverse
}
getInverse <- function(){
inverseMatrix
}
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Return a matrix that is the inverse of the parameter
cacheSolve <- function(x) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
if(ncol(data) == nrow(data)){
inverse <- solve(data)
}else{
message('Only square matrices can be inverted')
return(NULL)
}
x$setInverse(inverse)
inverse
}
tediousMatrix <- matrix(c(3, -7, 5, 2), 2, 2)
specialMatrix <- makeCacheMatrix()
specialMatrix$set(tediousMatrix)
cacheSolve(specialMatrix)
# Create a "special matrix", wich is really a list
# the "special matrix" has the the following functions:
# set, get, setInverse and getInverse
# it also caches the inverse matrix
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL
set <- function(y) {
x <<- y
inverseMatrix <<- NULL
}
get <- function(){
x
}
setInverse <- function(inverse){
inverseMatrix <<- inverse
}
getInverse <- function(){
inverseMatrix
}
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
# @param x is a "special matrix" made by makeCacheMatrix function
# Return a matrix that is the inverse of the parameter
cacheSolve <- function(x) {
inverse <- x$getInverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data)
x$setInverse(inverse)
inverse
}
tediousMatrix <- matrix(c(3, -7, 5, 2), 2, 2)
specialMatrix <- makeCacheMatrix()
specialMatrix$set(tediousMatrix)
cacheSolve(specialMatrix)
set.seed(1)
rpois(5, 2)
library(swirl)
swirl()
?Comparison
dasd
fileter()
fileter(cran)
cran
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 = select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size  + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
exit()
info()
main()
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
main()
info()
main()
swirl()]
swirl()
library(swirl)
swirl()
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
play()
?quantile
nxt()
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <-0 filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
?group_by
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
cran
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
arrange(desc(size_mb))
swirl()
library(swirl)
swirl()
library(tidyr)
swirl()
library(swirl)
swirl()
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, key = sex_class, value = count, -grade)
res
?separate
separate(res, col = sex_class, into = c("sex", "class"))
submit()
submit()
students3
?gather
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
?mutate
submit()
students4
student_info <- students4 %>%
select( id, name, sex) %>%
print
submit()
unique?
?unique
?unique
submit()
submit()
passed
failed
?mutate
passed <- mutate(passed, status = "passed")
failed %>% mutate(status = "failed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?select
?contains
?separate
submit()
submit()
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
?abline
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pollution, col = "red")
boxplot(pollution, pm25~region, col = "red")
boxplot pm25~region, col = "red")
boxplot(pm25~region, col = "red")
boxplot(data = pollution, pm25~region, col = "red")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <-  subset(pollution, pollution$region == "east")
east <-  subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "grenn")
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west"), col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
info
info()
bye()
library(swirl)
swirl()
?with()
with(polution, plot(latitude, pm25))
with(pollution, plot(latitude, pm25))
?abline
abline(h = 12, lwd =2)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mrow = c(1, 2), mar = c(5, 4, 2, 1))
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, pollution$region == "west")
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
swirl()
library(swirl)
swirl()
?Devices
with(faithful, plaot(euptions, waiting))
with(faithful, plot(euptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main main = "Old Faithful Geyser data")
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
title(main main = "Old Faithful Geyser data")
title(main = "Old Faithful Geyser data")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(car$dist), "SWIRL rules!")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xplot(Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, mpg)
qplot(displ, hwy, mpg)
qplot(mpg)
qplot(mpg$displ, mpg$hwy, mpg)
qplot(displ, hwy, data = mpg)
?par
library(swirl)
swirl()
main()
main()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
BodyWeight
names(BodyWeight)
library(datasets)
data(airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
plot(c(0,1),c(0,1))
arrows(0,0,1,1)
plot(c(0,3),c(0,3))
arrows(1,1,2,2)
arrows(2,2,-1,-1)
plot(c(0,6),c(0,6))
arrows(3,3,0,0)
?seq
arrows(seq(5,5,4))
seq(5,5,length.out = 5)
arrows(seq(5,5, length.out = 4))
seq(5,5,5,5)
arrows(5,5,5,5)
plot(c(0,6),c(0,6))
arrows(3,0)
arrows(0,0,3,0)
arrows(0,0,5,5)
plot(c(0,6),c(0,6))
arrows(3,3,0,0)
plot(c(0,6),c(0,6))
arrows(2,1,5,1)
arrows(2,1,2,5
)
x <- c(3,-6,4,2)
z <- x^2
z
sum <- sum(z)
sum
x = 1:400
y = x^2
plot(x, y, type="l", col="red")
plot(x, y, type="l", col="red")
title(main="Funzioni", col.main="blue", font.main=4)
plot.new()
plot(1, type="n", xlab="", ylab="", xlim=c(0, 10), ylim=c(0, 10))
plot(1, type="n", xlab="", ylab="", xlim=c(-10, 10), ylim=c(-10, 10))
abline(v=0)
abline(h=0)
sin(10)
sin(10)
?sin
sin(10**0.0174532925)
sin(10*0.0174532925)
rads <- function(fn, val){
fn(val*0.0174532925)
}
rads(sin, 10)
rads(sin, 10)*7
rads(sin, 80)
?rep
swirl()
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])]
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, pm0$State.Code == 36 && pm0$county.site %in% both)
cnt0 <- subset(pm0, $State.Code == 36 && county.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 && county.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, county.site == "63.2008")
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates- <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(lwd = 2, median(x0sub, na.rm = TRUE))
abline(lwd = 2, h =  median(x0sub, na.rm = TRUE))
plot(dates1, x1sub, pch = 20)
abline(lwd = 2, h =  median(x1sub, na.rm = TRUE))
rng <- range(x0sun, x1sub, na.rm = TRUE)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0,d1,by="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5)))
with(mrg,points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
setwd("~/Documents/projects/R/data-science-especialization/Reproducible Research/Week 2")
setwd("~/Documents/projects/R/data-science-especialization/Reproducible Research/Week 2/RepData_PeerAssessment1")
activityData <- read.csv('activity.zip', sep = ",")
activityData <- read.csv('activity.zip', sep = ";")
View(activityData)
activityData <- read.table('activity.zip', sep = ",")
activityData <- read.csv(unz("activity.zip", "activity.csv"), sep = ",")
View(head(activityData))
View(tail(activityData))
nrow(activityData[!is.na(activityData$steps), ])
View(head(activityData, 50))
View(head(activityData, 500))
View(tail(activityData, 500))
hist(activityData$steps)
View(tail(activityData, 500))
?library
library(dplyr)
?as.Date
activityData$date <- as.Date(as.character(activityData$date), "%Y-%m-%d")
View(tail(activityData, 500))
meanByDay <- group_by(activityData, date) %>% summarize(Mean = mean(steps))
View(head(meanByDay))
totalByDay <- group_by(activityData, date) %>% summarize(Total = mean(steps))
View(head(totalByDay))
totalByDay <- group_by(activityData, date) %>% summarize(Total = sum(steps))
View(head(totalByDay))
hist(totalByDay)
View(head(totalByDay))
totalByDay <- group_by(activityData, date) %>% summarize(steps = sum(steps))
hist(totalByDay$steps)
hist(totalByDay$steps, fill = "blue")
hist(totalByDay$steps, col = "blue")
totalByDay <- group_by(activityData, date) %>% summarize(steps = sum(steps, na.rm = TRUE))
hist(totalByDay$steps, col = "blue")
colors()
hist(totalByDay$steps, col = "coral4")
hist(totalByDay$steps, col = "wheat")
hist(totalByDay$steps, col = "violetred4")
hist(totalByDay$steps, col = "turquoise3")
View(totalByDay)
hist(totalByDay$steps, col = "turquoise3", xlab = "Total number of steps")
hist(totalByDay$steps, col = "turquoise3", xlab = "Total number of steps", main = "Total number of steps taken each day")
meanSteps <- mean(totalByDay$steps, na.rm = TRUE)
medianSteps <- median(totalByDay$steps, na.rm = TRUE)
abline(v=meanSteps, col="red")
?abline
abline(v=medianSteps, col="grey")
abline(v=medianSteps, col="black")
